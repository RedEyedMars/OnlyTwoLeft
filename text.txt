./src/editor\Editor.java:	protected List<Square> squares;
./src/editor\Editor.java:			Button<Editor> button = new Button<Editor>("squares",i,this,new ButtonAction(){
./src/editor\Editor.java:			Button<Editor> button = new Button<Editor>("squares",i,this,new ButtonAction(){
./src/editor\Editor.java:						squares.add(builder2);
./src/editor\Editor.java:					squares.add(builder1);
./src/editor\Editor.java:					if(squares.get(0)==builder1&&this instanceof MapEditor){
./src/editor\Editor.java:						squares.get(0).setX(0f);
./src/editor\Editor.java:						squares.get(0).setY(0f);
./src/editor\Editor.java:						squares.get(0).adjust(1f,1f);
./src/editor\Editor.java:				for(int i=squares.size()-1;i>=0;--i){
./src/editor\Editor.java:					if(squares.get(i).isWithin(e.getX(), e.getY())){
./src/editor\Editor.java:						Square square = squares.remove(i);
./src/editor\Editor.java:						squares.remove(ocs);
./src/editor\Editor.java:		for(Square square:squares){
./src/editor\Editor.java:		for(Square square:squares){
./src/editor\MapEditor.java:				squares = Hub.map.getSquares();
./src/editor\MapEditor.java:				if(squares.size()>0){
./src/editor\MapEditor.java:					squares.get(0).setX(0f);
./src/editor\MapEditor.java:					squares.get(0).setY(0f);
./src/editor\MapEditor.java:				squares = Hub.map.getSquares();
./src/editor\MapEditor.java:		squares.add(copy);
./src/editor\MapEditor.java:			else if(44==keycode&&!squares.isEmpty()){
./src/editor\MapEditor.java:				removeChild(squares.remove(squares.size()-1));
./src/editor\MapEditor.java:				createCopyOfSquare(squares.get(squares.size()-1));
./src/editor\MapEditor.java:		for(Square square:squares){
./src/editor\MapEditor.java:		for(Square square:squares){
./src/editor\MapEditor.java:		for(int i=1;i<squares.size();++i){
./src/editor\MapEditor.java:			squares.get(i).setX(squares.get(i).getX()+x);
./src/editor\MapEditor.java:			squares.get(i).setY(squares.get(i).getY()+y);
./src/editor\MapEditor.java:			squares.add(square);
./src/editor\MapEditor.java:		for(Square sqr:squares){
./src/editor\OnCreateSquareEditor.java:			squares = Hub.map.getTemplateSquares();
./src/editor\OnCreateSquareEditor.java:			for(Square square:squares){
./src/editor\OnCreateSquareEditor.java:			GraphicEntity e = new GraphicText("impact",""+squares.indexOf(square2),0);
./src/editor\OnCreateSquareEditor.java:		GraphicEntity e = new GraphicText("impact",""+squares.indexOf(square1),0);
./src/editor\OnCreateSquareEditor.java:		for(int i=0;i<squares.size();++i){
./src/editor\OnCreateSquareEditor.java:			squares.get(i).setX(squares.get(i).getX()+x);
./src/editor\OnCreateSquareEditor.java:			squares.get(i).setY(squares.get(i).getY()+y);
./src/game\environment\OnCreateAction.java:	public static final OnCreateAction create_squares = new OnCreateAction(){
./src/game\environment\Square.java:		super("squares");
./src/game\environment\Square.java:		super("squares");
./src/game\Game.java:		List<FunctionalSquare> squares = new ArrayList<FunctionalSquare>();
./src/game\Game.java:					//onHandleSquare.remove(0).act(squares.get(i));
./src/game\menu\DuoMenu.java:	public DuoMenu(List<Square> squares) {
./src/game\menu\DuoMenu.java:		addChild(new GraphicEntity("squares"));
./src/game\menu\DuoMenu.java:		for(Square square:squares){
./src/game\menu\DuoMenu.java:		this.squares = squares;
./src/game\menu\DuoMenu.java:		Gui.setView(new HostMenu(squares));
./src/game\menu\DuoMenu.java:		Gui.setView(new JoinMenu(squares));
./src/game\menu\DuoMenu.java:		Gui.setView(new MainMenu(squares));
./src/game\menu\EditorMenu.java:	public EditorMenu(List<Square> squares) {
./src/game\menu\EditorMenu.java:		addChild(new GraphicEntity("squares"));
./src/game\menu\EditorMenu.java:		for(Square square:squares){
./src/game\menu\EditorMenu.java:		this.squares = squares;
./src/game\menu\EditorMenu.java:		Gui.setView(new MainMenu(squares));
./src/game\menu\HostMenu.java:	public HostMenu(List<Square> squares) {
./src/game\menu\HostMenu.java:		addChild(new GraphicEntity("squares"));
./src/game\menu\HostMenu.java:		for(Square square:squares){
./src/game\menu\HostMenu.java:		this.squares = squares;
./src/game\menu\HostMenu.java:		Gui.setView(new DuoMenu(squares));
./src/game\menu\JoinMenu.java:	public JoinMenu(List<Square> squares) {
./src/game\menu\JoinMenu.java:		addChild(new GraphicEntity("squares"));
./src/game\menu\JoinMenu.java:			GraphicEntity selectorSquare = new GraphicEntity("squares",1);
./src/game\menu\JoinMenu.java:		for(Square square:squares){
./src/game\menu\JoinMenu.java:		this.squares = squares;
./src/game\menu\JoinMenu.java:		Gui.setView(new DuoMenu(squares));
./src/game\menu\MainMenu.java:	public MainMenu(List<Square> squares) {
./src/game\menu\MainMenu.java:		addChild(new GraphicEntity("squares"));
./src/game\menu\MainMenu.java:		this.squares = squares;
./src/game\menu\MainMenu.java:		for(Square square:squares){
./src/game\menu\MainMenu.java:		Gui.setView(new DuoMenu(squares));
./src/game\menu\MainMenu.java:		Gui.setView(new EditorMenu(squares));
./src/game\menu\Menu.java:	protected List<Square> squares;
./src/game\menu\Menu.java:			squares.add(new Square((int)(16*Math.random()),w,w));
./src/game\menu\Menu.java:			squares.get(squares.size()-1).setY(1f+1.5f*(float)Math.random());
./src/game\menu\Menu.java:			squares.get(squares.size()-1).setX((float) (-0.2f+1.4*Math.random()));
./src/game\menu\Menu.java:			addChild(squares.get(squares.size()-1));
./src/game\menu\Menu.java:			squares.get(squares.size()-1).onAddToDrawable();
./src/game\menu\Menu.java:			squares.get(squares.size()-1).getGraphicElement().rotate((float)(Math.random()-0.5f));
./src/game\menu\Menu.java:		for(int i=0;i<squares.size();++i){
./src/game\menu\Menu.java:			Square square = squares.get(i);
./src/game\menu\Menu.java:				squares.remove(square);
./src/gui\graphics\GraphicText.java:	protected GraphicEntity blinker = new GraphicEntity("squares",1){
./src/gui\graphics\images\image.list:64\squares.png